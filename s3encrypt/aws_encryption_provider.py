import filecmp
import os
import logging
import aws_encryption_sdk
import hashlib
from aws_encryption_sdk.internal.crypto import WrappingKey
from aws_encryption_sdk.key_providers.raw import RawMasterKeyProvider
from aws_encryption_sdk.identifiers import WrappingAlgorithm, EncryptionKeyType

logger = logging.getLogger(__name__)


class StaticRandomMasterKeyProvider(RawMasterKeyProvider):
    """Randomly and consistently generates 256-bit keys for each
    unique key ID."""

    provider_id = "static-random"

    def __init__(self, **kwargs):
        self._static_keys = {}

    def _get_raw_key(self, key_id):
        """Returns a static, randomly-generated symmetric key
        for the specified key ID.

        :param str key_id: Key ID
        :returns: Wrapping key that contains the specified static key
        :rtype: :class:`aws_encryption_sdk.internal.crypto.WrappingKey`
        """
        try:
            static_key = self._static_keys[key_id]
        except KeyError:
            # static_key = os.urandom(32)
            # TODO - fix
            static_key = hashlib.sha256(key_id).digest()
            self._static_keys[key_id] = static_key
        return WrappingKey(
            wrapping_algorithm=WrappingAlgorithm.AES_256_GCM_IV12_TAG16_NO_PADDING,
            wrapping_key=static_key,
            wrapping_key_type=EncryptionKeyType.SYMMETRIC,
        )


def get_master_key_provider(key_id: bytes) -> RawMasterKeyProvider:
    try:
        master_key_provider = StaticRandomMasterKeyProvider()
        master_key_provider.add_master_key(key_id)
        return master_key_provider
    except Exception as e:
        logger.error(e)
        raise EncrypterError(" s3encrypt.encrypter encountered an error ", e)


def encrypt_file(key: bytes, file_path: str, encrypted_file_path: str,) -> None:
    try:
        master_key_provider = get_master_key_provider(key)
        # Encrypt the plaintext source data.
        with open(file_path, "rb") as plaintext, open(
            encrypted_file_path, "wb"
        ) as ciphertext:
            with aws_encryption_sdk.stream(
                mode="e", source=plaintext, key_provider=master_key_provider
            ) as encryptor:
                i = 0
                for chunk in encryptor:
                    ciphertext.write(chunk)
                    logger.info(f"Wrote chunk {i}")
                    i += 1

    except Exception as e:
        logger.error(e)
        logger.error(
            f"Args: file_path={file_path}, "
            + f"encrypted_file_path={encrypted_file_path}"
        )
        raise EncrypterError(" s3encrypt.encrypter encountered an error ", e)


def decrypt_file(key: bytes, file_path: str, decrypted_file_path: str,) -> None:
    try:
        master_key_provider = get_master_key_provider(key)
        # Decrypt the ciphertext.
        with open(file_path, "rb") as ciphertext, open(
            decrypted_file_path, "wb"
        ) as plaintext:
            with aws_encryption_sdk.stream(
                mode="d", source=ciphertext, key_provider=master_key_provider
            ) as decryptor:
                for chunk in decryptor:
                    plaintext.write(chunk)

    except Exception as e:
        logger.error(e)
        logger.error(
            f"Args: file_path={file_path}, "
            + f"decrypted_file_path={decrypted_file_path}"
        )
        raise EncrypterError(" s3encrypt.encrypter encountered an error ", e)


class EncrypterError(Exception):
    """Generic exception for the s3encrypt.encrypter module used to wrap
    exceptions generated by dependencies.
    """

    def __init__(self, msg: str, original_exception: Exception = None):
        super(EncrypterError, self).__init__(f"{msg}: {original_exception}")
        self.original_exception = original_exception
