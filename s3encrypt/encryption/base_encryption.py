from abc import ABC, abstractmethod


class FileEncryptDecrypt(ABC):
    @abstractmethod
    def encrypt_file(
        self, key: bytes, file_path: str, encrypted_file_path: str
    ) -> None:
        raise NotImplementedError("Not implemented")

    @abstractmethod
    def decrypt_file(
        self, key: bytes, file_path: str, decrypted_file_path: str
    ) -> None:
        raise NotImplementedError("Not implemented")


class EncryptionError(Exception):
    # Generic exception for the s3encrypt.encrypter module used to wrap
    # exceptions generated by dependencies.

    def __init__(self, msg: str, original_exception: Exception = Exception()):
        super(EncryptionError, self).__init__(f"{msg}: {original_exception}")
        self.original_exception = original_exception
